#file: noinspection UndefinedAction
name: Build and Deploy Azure Functions

# Trigger on pushes to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Optional: Define environment variables used across jobs
env:
  PYTHON_VERSION: '3.11'
  # Define your Azure Function App names here
  AZURE_FUNCTIONAPP_NAME_FETCHER: 'func-alma-apifetcher' # Replace with your actual name
  AZURE_FUNCTIONAPP_NAME_DATAPREP: 'func-alma-dataprep' # Replace with your actual name
  AZURE_FUNCTIONAPP_NAME_NOTIFIER: 'func-alma-notifier' # Replace with your actual name

# Permissions needed for OIDC Azure Login (recommended)
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function_dir: [ func_alma_apifetcher, func_alma_dataprep, func_alma_notifier ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install Poetry using pip INTO the main python env setup above
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest # Or your desired Poetry 2.x version
          virtualenvs-create: false
          virtualenvs-in-project: false

      # Install dependencies using the now-installed Poetry
      # Poetry should use the current Python environment automatically
      - name: Install Dependencies for ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          poetry install --no-interaction --no-root  --only main
        # shell: bash # Default

      - name: Copy shared_code into ${{ matrix.function_dir }}
        run: |
          mkdir -p ./${{ matrix.function_dir }}/shared_code
          cp -r ./shared_code/* ./${{ matrix.function_dir }}/shared_code/
        # shell: bash

      - name: Export requirements.txt for ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          echo "--- Verifying Poetry in export step ---"
          which poetry
          poetry --version
          echo "--- Running Export ---"
          # Direct command should work now if installed correctly in main env
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          echo "--- requirements.txt content (first 10 lines) ---"
          head -n 10 requirements.txt
          cd ..
        # shell: bash

      - name: Archive function app package ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          zip -r ../${{ matrix.function_dir }}.zip . -x ".venv/*" ".git/*" "__pycache__/*" "*.pyc" ".pytest_cache/*" "poetry.lock" "pyproject.toml"
          cd ..
        # shell: bash

      - name: Upload function app artifact ${{ matrix.function_dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.function_dir }}
          path: ${{ matrix.function_dir }}.zip


  deploy:
    runs-on: ubuntu-latest
    needs: build # This job runs only after the build job succeeds
    environment: production # Optional: Define environment for approvals/secrets

    steps:
    - name: Download all function app artifacts
      uses: actions/download-artifact@v4
      # Downloads all artifacts created in the 'build' job
      # They will be placed in directories named after the artifacts (e.g., ./func_alma_apifetcher/)
      # Correction: download-artifact v4 downloads files directly if single file per artifact
      # So we will have func_alma_apifetcher.zip, etc. in the root

    - name: Azure Login
      uses: azure/login@v1
      with:
        # Use OIDC (preferred) - requires configuration in Azure AD & GitHub
        # client-id: ${{ secrets.AZURE_CLIENT_ID }}
        # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # client-secret: ${{ secrets.AZURE_CLIENT_SECRET }} # Optional if using OIDC
        # Or Use Service Principal Secret:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # JSON with clientID, clientSecret, tenantID, subscriptionID

    - name: Deploy Alma API Fetcher Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_FETCHER }}
        package: func_alma_apifetcher.zip # Path to the downloaded zip artifact

    - name: Deploy Alma DataPrep Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_DATAPREP }}
        package: func_alma_dataprep.zip # Path to the downloaded zip artifact

    - name: Deploy Alma Notifier Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_NOTIFIER }}
        package: func_alma_notifier.zip # Path to the downloaded zip artifact

    # Optional: Azure Logout
    # - name: Azure Logout
    #   run: |
    #     az logout
    #     az cache purge
    #     az account clear