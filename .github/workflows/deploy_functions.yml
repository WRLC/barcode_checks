#file: noinspection UndefinedAction
name: Build and Deploy Azure Functions

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  AZURE_FUNCTIONAPP_NAME_FETCHER: 'func-alma-apifetcher'
  AZURE_FUNCTIONAPP_NAME_DATAPREP: 'func-alma-dataprep'
  AZURE_FUNCTIONAPP_NAME_NOTIFIER: 'func-alam-notifier'
  AZURE_FUNCTIONAPP_NAME_SCHEDULER: 'func-alma-scheduler'
  AZURE_FUNCTIONS_IMAGE: mcr.microsoft.com/azure-functions/python:4-python3.11

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function_dir: [ func_alma_apifetcher, func_alma_dataprep, func_alma_notifier, func_alma_scheduler ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Clear Poetry Caches
        run: poetry cache clear . --all -n
        shell: bash

      - name: Export requirements.txt for ${{ matrix.function_dir }}
        run: |
          echo "--- Preparing Poetry environment for ${{ matrix.function_dir }} ---"
          cd ${{ matrix.function_dir }}

          echo "--- Running poetry install (for plugins/setup) ---"
          # Consider changing to 'poetry sync' as per deprecation warning, though not the cause of failure
          poetry install --no-root --sync

          echo "--- Running Export (DEBUG - Isolate Export Command) ---"
          # Run export directly, redirect output, capture exit code
          poetry export -f requirements.txt --output temp_requirements.txt --without-hashes --without dev

          echo "--- Export succeeded, now filtering with grep ---"
          grep -v -- "-e file:" temp_requirements.txt > requirements.txt

          # Clean up temporary file
          rm temp_requirements.txt

          echo "--- Final requirements.txt content ---"
          cat requirements.txt
          echo "--- End requirements.txt content ---"

          echo "--- Checking for manual cryptography pin ---"
          grep "cryptography==" requirements.txt || echo "Cryptography not pinned in requirements.txt (good)"

          cd ..
        shell: bash

      - name: Install dependencies into .python_packages using Docker for ${{ matrix.function_dir }}
        run: |
          echo "Pulling Azure Functions image: ${{ env.AZURE_FUNCTIONS_IMAGE }}"
          docker pull ${{ env.AZURE_FUNCTIONS_IMAGE }}
          echo "Running pip install in Docker container for ${{ matrix.function_dir }}"
          docker run --rm \
            -v "${{ github.workspace }}/${{ matrix.function_dir }}:/src" \
            ${{ env.AZURE_FUNCTIONS_IMAGE }} \
            pip install --target="/src/.python_packages/lib/site-packages" -r /src/requirements.txt
        shell: bash

      - name: Copy shared_code into ${{ matrix.function_dir }}
        run: |
          echo "Copying shared_code into ./${{ matrix.function_dir }}/"
          # Copy the contents of shared_code into a directory named shared_code within the function app dir
          mkdir -p ./${{ matrix.function_dir }}/shared_code
          cp -r ./shared_code/* ./${{ matrix.function_dir }}/shared_code/
        shell: bash

      - name: Archive function app package ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          echo "Zipping contents of $(pwd)"
          # Zip ., which now includes .python_packages and shared_code
          zip -r ../${{ matrix.function_dir }}.zip . -x ".venv/*" ".git/*" "__pycache__/*" "*.pyc" ".pytest_cache/*" "poetry.lock" "pyproject.toml" ".poetry/*"
          cd ..
        shell: bash

      - name: Upload function app artifact ${{ matrix.function_dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.function_dir }}
          path: ${{ matrix.function_dir }}.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
    - name: Download all function app artifacts
      uses: actions/download-artifact@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Alma API Fetcher Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_FETCHER }}
        package: ./func_alma_apifetcher/func_alma_apifetcher.zip
        scm-do-build-during-deployment: false

    - name: Deploy Alma DataPrep Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_DATAPREP }}
        package: ./func_alma_dataprep/func_alma_dataprep.zip
        scm-do-build-during-deployment: false

    - name: Deploy Alma Notifier Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_NOTIFIER }}
        package: ./func_alma_notifier/func_alma_notifier.zip
        scm-do-build-during-deployment: false

    - name: Deploy Alma Scheduler Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_SCHEDULER }}
        package: ./func_alma_scheduler/func_alma_scheduler.zip
        scm-do-build-during-deployment: false
