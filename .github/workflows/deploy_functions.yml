#file: noinspection UndefinedAction
name: Build and Deploy Azure Functions

# Trigger on pushes to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Optional: Define environment variables used across jobs
env:
  PYTHON_VERSION: '3.11'
  # Define your Azure Function App names here
  AZURE_FUNCTIONAPP_NAME_FETCHER: 'func-alma-apifetcher' # Replace with your actual name
  AZURE_FUNCTIONAPP_NAME_DATAPREP: 'func-alma-dataprep' # Replace with your actual name
  AZURE_FUNCTIONAPP_NAME_NOTIFIER: 'func-alam-notifier' # Replace with your actual name

# Permissions needed for OIDC Azure Login (recommended)
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function_dir: [ func_alma_apifetcher, func_alma_dataprep, func_alma_notifier ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install Poetry using pip INTO the main python env setup above
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest # Or your desired Poetry 2.x version
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Clear Poetry Caches
        run: poetry cache clear . --all -n
        shell: bash

      - name: Validate/Install Base Env for ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          echo "Running poetry install for $(pwd)"
          poetry install --no-interaction --no-root --sync
        shell: bash

      - name: Export requirements.txt for ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          echo "--- Running Export ---"
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          echo "--- requirements.txt content ---"
          cat requirements.txt
          echo "--- End requirements.txt content ---"
          cd ..
        shell: bash

      - name: Archive function app package ${{ matrix.function_dir }}
        run: |
          cd ${{ matrix.function_dir }}
          zip -r ../${{ matrix.function_dir }}.zip . -x ".venv/" ".git/" "pycache/" ".pyc" ".pytest_cache/" "poetry.lock" "pyproject.toml" ".poetry/" ".python_packages/*"
          cd ..
        # shell: bash

      - name: Upload function app artifact ${{ matrix.function_dir }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.function_dir }}
          path: ${{ matrix.function_dir }}.zip


  deploy:
    runs-on: ubuntu-latest
    needs: build # This job runs only after the build job succeeds
    environment: production # Optional: Define environment for approvals/secrets

    steps:
    - name: Download all function app artifacts
      uses: actions/download-artifact@v4
      # Downloads all artifacts created in the 'build' job
      # They will be placed in directories named after the artifacts (e.g., ./func_alma_apifetcher/)
      # Correction: download-artifact v4 downloads files directly if single file per artifact
      # So we will have func_alma_apifetcher.zip, etc. in the root

    - name: Azure Login
      uses: azure/login@v2
      with:
        # Use OIDC (preferred) - requires configuration in Azure AD & GitHub
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Alma API Fetcher Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_FETCHER }}
        package: ./func_alma_apifetcher/func_alma_apifetcher.zip # Path to the downloaded zip artifact
        scm-do-build-during-deployment: true

    - name: Deploy Alma DataPrep Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_DATAPREP }}
        package: ./func_alma_dataprep/func_alma_dataprep.zip # Path to the downloaded zip artifact
        scm-do-build-during-deployment: true

    - name: Deploy Alma Notifier Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_NOTIFIER }}
        package: ./func_alma_notifier/func_alma_notifier.zip # Path to the downloaded zip artifact
        scm-do-build-during-deployment: true

    # Optional: Azure Logout
    # - name: Azure Logout
    #   run: |
    #     az logout
    #     az cache purge
    #     az account clear